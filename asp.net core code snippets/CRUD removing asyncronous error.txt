
-----------------------------appsettings.json------------------

{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "Domain": "qualified.domain.name",
    "TenantId": "22222222-2222-2222-2222-222222222222",
    "ClientId": "11111111-1111-1111-11111111111111111",
    "CallbackPath": "/signin-oidc"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    //"Shopbridge_Context": "Server=(localdb)\\MSSQLLocalDB;Database=Shopbridge_Context-bf53e110-7950-4cb0-a45d-226517a8f7dd;Trusted_Connection=True;MultipleActiveResultSets=true",
    "Shopbridge_Context": "Server=.;Database=Shopbridge;User id=sa;password=cgmsc;Integrated Security=False"
  }
}


------------------Startup.cs-----------------------------------

using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Identity.Web;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Shopbridge_base.Data;
using Shopbridge_base.Domain.Services.Interfaces;
using Shopbridge_base.Domain.Services;

namespace Shopbridge_base
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddMicrosoftIdentityWebApi(Configuration.GetSection("AzureAd"));

            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Shopbridge_base", Version = "v1" });
            });

            services.AddDbContext<Shopbridge_Context>(options =>
                    options.UseSqlServer(Configuration.GetConnectionString("Shopbridge_Context")), ServiceLifetime.Singleton);

            services.AddScoped<IProductService, ProductService>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Shopbridge_base v1"));
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}



-----------------------------Data/Shopbridge_Context.cs-------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Shopbridge_base.Domain.Models;

namespace Shopbridge_base.Data
{
    public class Shopbridge_Context : DbContext
    {
        public Shopbridge_Context (DbContextOptions<Shopbridge_Context> options)
            : base(options)
        {
        }

        public DbSet<Product> Product { get; set; }
    }
}




--------------Domian\Model\Products.cs----------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Shopbridge_base.Domain.Models
{
    public class Product
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Product_Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public double? Price { get; set; }
        public string Code { get; set; }
        public int? Stock_Quantity { get; set; }
    }
}

--------------------Services/Interfaces/IProductServices.cs----------------

using Shopbridge_base.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Shopbridge_base.Domain.Services.Interfaces
{
    public interface IProductService
    {
        public Task<IEnumerable<Product>> FindAll();
        public Task<int> Insert(Product product);
        public Task<int> Delete(int id);
        public Task<Product> FindOne(int id);
        public Task<int> Update(Product product);
    }
}

---------------Services/Implementations/ProductServices.cs---------------

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Shopbridge_base.Data;
using Shopbridge_base.Domain.Models;
using Shopbridge_base.Domain.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Shopbridge_base.Domain.Services
{
    public class ProductService : IProductService
    {
        private readonly ILogger<ProductService> _logger;
        private readonly Shopbridge_Context _dbContext;

        public ProductService(ILogger<ProductService> logger, Shopbridge_Context dbContext)
        {
            _logger = logger;
            _dbContext = dbContext;
        }

        public async Task<int> Delete(int id)
        {
            try
            {
                var productDetail = _dbContext.Product.FirstOrDefault(x => x.Product_Id == id);     
                _dbContext.Product.Remove(productDetail);

                return await _dbContext.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogInformation("Error in Delete", ex);
                return 0;
            }

        }

        public async Task<IEnumerable<Product>> FindAll()
        {
            try
            { 
            return await _dbContext.Product.ToListAsync();
            }
            catch (Exception ex)
            {
                _logger.LogInformation("Error in Find All", ex);
                return null;
            }

        }

        public async Task<Product> FindOne(int id)
        {
            try
            {
                return await _dbContext.Product.FirstOrDefaultAsync(x => x.Product_Id == id);
            }
            catch (Exception ex)
            {
                _logger.LogInformation("Error in Findone", ex);
                return null;
            }
        }

        public async Task<int> Insert(Product product)
        {
            try
            {
                _dbContext.Add(product);
                return await _dbContext.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogInformation("Error in Insert", ex);
                return 0;
            }
        }

        public async Task<int> Update(Product product)
        {
            try
            {
                var productDetail = _dbContext.Product.FirstOrDefault(x => x.Product_Id == product.Product_Id);
                productDetail.Product_Id = product.Product_Id;
                productDetail.Description = product.Description;
                productDetail.Price = product.Price;
                productDetail.Code = product.Code;
                productDetail.Stock_Quantity = product.Stock_Quantity;
                productDetail.Name = product.Name;

                _dbContext.Update(productDetail);               
                return await _dbContext.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogInformation("Error in Update", ex);
                return 0;
            }
        }
    }


}

---------------Controllers/ProductControllers.cs-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Shopbridge_base.Data;
using Shopbridge_base.Domain.Models;
using Shopbridge_base.Domain.Services.Interfaces;

namespace Shopbridge_base.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        private readonly IProductService _productService;
        private readonly ILogger<ProductsController> _logger;
        public ProductsController(IProductService productService , ILogger<ProductsController> logger)
        {
            _productService = productService;
            _logger = logger;
        }

       
        [HttpGet]   
        public async Task<ActionResult<IEnumerable<Product>>> GetProduct()
        {
            return Ok(await _productService.FindAll());
        }

        
        [HttpGet("{id}")]
        public async Task<ActionResult<Product>> GetProduct(int id)
        {
          
            var result = await _productService.FindOne(id);
            if (result != default)
                return Ok(result);
            else
                return NotFound();
         
        }

       
        [HttpPut("{id}")]
        public async Task<IActionResult> PutProduct(int id, Product product)
        {
            if (product.Product_Id == null || product.Product_Id <= 0)
            {
                return BadRequest("Id should be set for insert action.");
            }

            if (product.Product_Id != id)
            {
                return BadRequest("Id not match with object id");
            }

            bool isExist = await ProductExists(id);

            if (!isExist)
            {
                return NotFound();
            }

            var result = await _productService.Update(product);
            if (result > 0)
                return NoContent();
            else
                return NotFound();
        }

        
        [HttpPost]
        public async Task<ActionResult<Product>> PostProduct(Product product)
        {
            if (product.Product_Id != 0 )
            {
                return BadRequest("Id cannot be set for insert action.");
            }


            var result = await _productService.Insert(product);
            if (!string.IsNullOrEmpty(result.ToString().Trim()))
                return Ok();
            else
                return BadRequest();
        }

        
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            bool isExist = await ProductExists(id);
            if (!isExist)
            {
                return NotFound();
            }

            var result = await _productService.Delete(id);
            if (result > 0)
                return NoContent();
            else
                return NotFound();
        }

        private async Task<bool> ProductExists(int id)
        {
            var res = await _productService.FindOne(id);
            if (res != default)
                return true;
            else
                return false;
        }

        //private bool ProductExists(int id)
        //{
        //    var res =  _productService.FindOne(id);
        //    if (res != default)
        //        return true;
        //    else
        //        return false;
        //}
    }
}

